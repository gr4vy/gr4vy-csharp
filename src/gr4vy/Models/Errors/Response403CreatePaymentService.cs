//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace gr4vy.Models.Errors
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using gr4vy.Models.Errors;
    using gr4vy.Utils;
    

    public class Response403CreatePaymentServiceType
    {
        private Response403CreatePaymentServiceType(string value) { Value = value; }

        public string Value { get; private set; }
        public static Response403CreatePaymentServiceType Error403 { get { return new Response403CreatePaymentServiceType("Error403"); } }
        
        public static Response403CreatePaymentServiceType Error403Forbidden { get { return new Response403CreatePaymentServiceType("Error403Forbidden"); } }
        
        public static Response403CreatePaymentServiceType Error403Active { get { return new Response403CreatePaymentServiceType("Error403Active"); } }
        
        public static Response403CreatePaymentServiceType Null { get { return new Response403CreatePaymentServiceType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(Response403CreatePaymentServiceType v) { return v.Value; }
        public static Response403CreatePaymentServiceType FromString(string v) {
            switch(v) {
                case "Error403": return Error403;
                case "Error403Forbidden": return Error403Forbidden;
                case "Error403Active": return Error403Active;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for Response403CreatePaymentServiceType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((Response403CreatePaymentServiceType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// The credentials were invalid or the caller did not have permission to act on the resource.
    /// </summary>
    [JsonConverter(typeof(Response403CreatePaymentService.Response403CreatePaymentServiceConverter))]
    public class Response403CreatePaymentService {
        public Response403CreatePaymentService(Response403CreatePaymentServiceType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Error403? Error403 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Error403Forbidden? Error403Forbidden { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Error403Active? Error403Active { get; set; }

        public Response403CreatePaymentServiceType Type { get; set; }


        public static Response403CreatePaymentService CreateError403(Error403 error403) {
            Response403CreatePaymentServiceType typ = Response403CreatePaymentServiceType.Error403;

            Response403CreatePaymentService res = new Response403CreatePaymentService(typ);
            res.Error403 = error403;
            return res;
        }

        public static Response403CreatePaymentService CreateError403Forbidden(Error403Forbidden error403Forbidden) {
            Response403CreatePaymentServiceType typ = Response403CreatePaymentServiceType.Error403Forbidden;

            Response403CreatePaymentService res = new Response403CreatePaymentService(typ);
            res.Error403Forbidden = error403Forbidden;
            return res;
        }

        public static Response403CreatePaymentService CreateError403Active(Error403Active error403Active) {
            Response403CreatePaymentServiceType typ = Response403CreatePaymentServiceType.Error403Active;

            Response403CreatePaymentService res = new Response403CreatePaymentService(typ);
            res.Error403Active = error403Active;
            return res;
        }

        public static Response403CreatePaymentService CreateNull() {
            Response403CreatePaymentServiceType typ = Response403CreatePaymentServiceType.Null;
            return new Response403CreatePaymentService(typ);
        }

        public class Response403CreatePaymentServiceConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Response403CreatePaymentService);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Response403CreatePaymentService(Response403CreatePaymentServiceType.Error403)
                    {
                        Error403 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Error403>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Error403), new Response403CreatePaymentService(Response403CreatePaymentServiceType.Error403), "Error403"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Response403CreatePaymentService(Response403CreatePaymentServiceType.Error403Forbidden)
                    {
                        Error403Forbidden = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Error403Forbidden>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Error403Forbidden), new Response403CreatePaymentService(Response403CreatePaymentServiceType.Error403Forbidden), "Error403Forbidden"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Response403CreatePaymentService(Response403CreatePaymentServiceType.Error403Active)
                    {
                        Error403Active = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Error403Active>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Error403Active), new Response403CreatePaymentService(Response403CreatePaymentServiceType.Error403Active), "Error403Active"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Response403CreatePaymentService res = (Response403CreatePaymentService)value;
                if (Response403CreatePaymentServiceType.FromString(res.Type).Equals(Response403CreatePaymentServiceType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Error403 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Error403));
                    return;
                }
                if (res.Error403Forbidden != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Error403Forbidden));
                    return;
                }
                if (res.Error403Active != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Error403Active));
                    return;
                }

            }

        }

    }
}