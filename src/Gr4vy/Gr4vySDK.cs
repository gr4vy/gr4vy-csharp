//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Gr4vy
{
    using Gr4vy.Hooks;
    using Gr4vy.Models.Components;
    using Gr4vy.Models.Errors;
    using Gr4vy.Utils;
    using Gr4vy.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;


    /// <summary>
    /// Gr4vy: The Gr4vy API.
    /// </summary>
    public interface IGr4vySDK
    {
        public IAccountUpdater AccountUpdater { get; }
        public IBuyers Buyers { get; }
        public IPaymentMethods PaymentMethods { get; }
        public IGiftCards GiftCards { get; }
        public ICardSchemeDefinitions CardSchemeDefinitions { get; }
        public IDigitalWallets DigitalWallets { get; }
        public ITransactions Transactions { get; }
        public IRefunds Refunds { get; }
        public IPaymentOptions PaymentOptions { get; }
        public IPaymentServiceDefinitions PaymentServiceDefinitions { get; }
        public IPaymentServices PaymentServices { get; }
        public IAuditLogs AuditLogs { get; }
        public ICheckoutSessions CheckoutSessions { get; }
        public IMerchantAccounts MerchantAccounts { get; }
        public IPayouts Payouts { get; }
    }

    public class SDKConfig
    {
        /// <summary>
        /// Server identifiers available to the SDK.
        /// </summary>
        public enum Server {
        Production,
        Sandbox,
        }

        /// <summary>
        /// Server URLs available to the SDK.
        /// </summary>
        public static readonly Dictionary<Server, string> ServerMap = new Dictionary<Server, string>()
        {
            { Server.Production, "https://api.{id}.gr4vy.app" },
            { Server.Sandbox, "https://api.sandbox.{id}.gr4vy.app" },
        };

        public string ServerUrl = "";
        public Server? ServerName = null;
        public Dictionary<Server, Dictionary<string, string>> ServerDefaults = new Dictionary<Server, Dictionary<string, string>>();
        public string? MerchantAccountId;
        public SDKHooks Hooks = new SDKHooks();
        public RetryConfig? RetryConfig = null;

        public string GetTemplatedServerUrl()
        {
            if (!String.IsNullOrEmpty(this.ServerUrl))
            {
                return Utilities.TemplateUrl(Utilities.RemoveSuffix(this.ServerUrl, "/"), new Dictionary<string, string>());
            }
            if (this.ServerName is null)
            {
                this.ServerName = SDKConfig.Server.Production;
            }
            else if (!SDKConfig.ServerMap.ContainsKey(this.ServerName.Value))
            {
                throw new Exception($"Invalid server \"{this.ServerName.Value}\"");
            }

            Dictionary<string, string> serverDefault = new Dictionary<string, string>();

            if (this.ServerDefaults.ContainsKey(this.ServerName.Value))
            {
                serverDefault = this.ServerDefaults[this.ServerName.Value];
            }

            return Utilities.TemplateUrl(SDKConfig.ServerMap[this.ServerName.Value], serverDefault);
        }

        public ISpeakeasyHttpClient InitHooks(ISpeakeasyHttpClient client)
        {
            string preHooksUrl = GetTemplatedServerUrl();
            var (postHooksUrl, postHooksClient) = this.Hooks.SDKInit(preHooksUrl, client);
            if (preHooksUrl != postHooksUrl)
            {
                this.ServerUrl = postHooksUrl;
            }
            return postHooksClient;
        }
    }

    /// <summary>
    /// Gr4vy: The Gr4vy API.
    /// </summary>
    public class Gr4vySDK: IGr4vySDK
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.0.12";
        private const string _sdkGenVersion = "2.598.22";
        private const string _openapiDocVersion = "1.0.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.0.12 2.598.22 1.0.0 Gr4vy";
        private string _serverUrl = "";
        private SDKConfig.Server? _server = null;
        private ISpeakeasyHttpClient _client;
        private Func<Gr4vy.Models.Components.Security>? _securitySource;
        public IAccountUpdater AccountUpdater { get; private set; }
        public IBuyers Buyers { get; private set; }
        public IPaymentMethods PaymentMethods { get; private set; }
        public IGiftCards GiftCards { get; private set; }
        public ICardSchemeDefinitions CardSchemeDefinitions { get; private set; }
        public IDigitalWallets DigitalWallets { get; private set; }
        public ITransactions Transactions { get; private set; }
        public IRefunds Refunds { get; private set; }
        public IPaymentOptions PaymentOptions { get; private set; }
        public IPaymentServiceDefinitions PaymentServiceDefinitions { get; private set; }
        public IPaymentServices PaymentServices { get; private set; }
        public IAuditLogs AuditLogs { get; private set; }
        public ICheckoutSessions CheckoutSessions { get; private set; }
        public IMerchantAccounts MerchantAccounts { get; private set; }
        public IPayouts Payouts { get; private set; }

        public Gr4vySDK(string? bearerAuth = null, Func<string>? bearerAuthSource = null, string? merchantAccountId = null, SDKConfig.Server? server = null, string?  id = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (server != null)
            {
              _server = server;
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
                _serverUrl = serverUrl;
            }

            Dictionary<SDKConfig.Server, Dictionary<string, string>> serverDefaults = new Dictionary<SDKConfig.Server, Dictionary<string, string>>()
            {
                {SDKConfig.Server.Production, new Dictionary<string, string>()
                {
                    {"id", id == null ? "example" : id},
                }},
                {SDKConfig.Server.Sandbox, new Dictionary<string, string>()
                {
                    {"id", id == null ? "example" : id},
                }},
            };

            _client = client ?? new SpeakeasyHttpClient();

            if(bearerAuthSource != null)
            {
                _securitySource = () => new Gr4vy.Models.Components.Security() { BearerAuth = bearerAuthSource() };
            }
            else if(bearerAuth != null)
            {
                _securitySource = () => new Gr4vy.Models.Components.Security() { BearerAuth = bearerAuth };
            }
            else
            {
                throw new Exception("bearerAuth and bearerAuthSource cannot both be null");
            }

            SDKConfiguration = new SDKConfig()
            {
                MerchantAccountId = merchantAccountId,
                ServerDefaults = serverDefaults,
                ServerName = _server,
                ServerUrl = _serverUrl,
                RetryConfig = retryConfig
            };

            _client = SDKConfiguration.InitHooks(_client);


            AccountUpdater = new AccountUpdater(_client, _securitySource, _serverUrl, SDKConfiguration);


            Buyers = new Buyers(_client, _securitySource, _serverUrl, SDKConfiguration);


            PaymentMethods = new PaymentMethods(_client, _securitySource, _serverUrl, SDKConfiguration);


            GiftCards = new GiftCards(_client, _securitySource, _serverUrl, SDKConfiguration);


            CardSchemeDefinitions = new CardSchemeDefinitions(_client, _securitySource, _serverUrl, SDKConfiguration);


            DigitalWallets = new DigitalWallets(_client, _securitySource, _serverUrl, SDKConfiguration);


            Transactions = new Transactions(_client, _securitySource, _serverUrl, SDKConfiguration);


            Refunds = new Refunds(_client, _securitySource, _serverUrl, SDKConfiguration);


            PaymentOptions = new PaymentOptions(_client, _securitySource, _serverUrl, SDKConfiguration);


            PaymentServiceDefinitions = new PaymentServiceDefinitions(_client, _securitySource, _serverUrl, SDKConfiguration);


            PaymentServices = new PaymentServices(_client, _securitySource, _serverUrl, SDKConfiguration);


            AuditLogs = new AuditLogs(_client, _securitySource, _serverUrl, SDKConfiguration);


            CheckoutSessions = new CheckoutSessions(_client, _securitySource, _serverUrl, SDKConfiguration);


            MerchantAccounts = new MerchantAccounts(_client, _securitySource, _serverUrl, SDKConfiguration);


            Payouts = new Payouts(_client, _securitySource, _serverUrl, SDKConfiguration);
        }
    }
}