//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Gr4vy
{
    using Gr4vy.Hooks;
    using Gr4vy.Models.Components;
    using Gr4vy.Models.Errors;
    using Gr4vy.Utils;
    using Gr4vy.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;


    /// <summary>
    /// Gr4vy: The Gr4vy API.
    /// </summary>
    public interface IGr4vySDK
    {
        public IAccountUpdater AccountUpdater { get; }
        public IBuyers Buyers { get; }
        public IPaymentMethods PaymentMethods { get; }
        public IGiftCards GiftCards { get; }
        public ICardSchemeDefinitions CardSchemeDefinitions { get; }
        public IDigitalWallets DigitalWallets { get; }
        public ITransactions Transactions { get; }
        public IRefunds Refunds { get; }
        public IPaymentOptions PaymentOptions { get; }
        public IPaymentServiceDefinitions PaymentServiceDefinitions { get; }
        public IPaymentServices PaymentServices { get; }
        public IAuditLogs AuditLogs { get; }
        public ICheckoutSessions CheckoutSessions { get; }
        public IMerchantAccounts MerchantAccounts { get; }
        public IPayouts Payouts { get; }
    }


    /// <summary>
    /// Gr4vy: The Gr4vy API.
    /// </summary>
    public class Gr4vySDK: IGr4vySDK
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "1.0.0-beta.8";
        private const string _sdkGenVersion = "2.614.0";
        private const string _openapiDocVersion = "1.0.0";
        public IAccountUpdater AccountUpdater { get; private set; }
        public IBuyers Buyers { get; private set; }
        public IPaymentMethods PaymentMethods { get; private set; }
        public IGiftCards GiftCards { get; private set; }
        public ICardSchemeDefinitions CardSchemeDefinitions { get; private set; }
        public IDigitalWallets DigitalWallets { get; private set; }
        public ITransactions Transactions { get; private set; }
        public IRefunds Refunds { get; private set; }
        public IPaymentOptions PaymentOptions { get; private set; }
        public IPaymentServiceDefinitions PaymentServiceDefinitions { get; private set; }
        public IPaymentServices PaymentServices { get; private set; }
        public IAuditLogs AuditLogs { get; private set; }
        public ICheckoutSessions CheckoutSessions { get; private set; }
        public IMerchantAccounts MerchantAccounts { get; private set; }
        public IPayouts Payouts { get; private set; }

        public Gr4vySDK(string? bearerAuth = null, Func<string>? bearerAuthSource = null, string? merchantAccountId = null, SDKConfig.Server? server = null, string?  id = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }

            Dictionary<SDKConfig.Server, Dictionary<string, string>> serverVariables = new Dictionary<SDKConfig.Server, Dictionary<string, string>>()
            {
                {SDKConfig.Server.Production, new Dictionary<string, string>()
                {
                    {"id", id == null ? "example" : id},
                }},
                {SDKConfig.Server.Sandbox, new Dictionary<string, string>()
                {
                    {"id", id == null ? "example" : id},
                }},
            };
            Func<Gr4vy.Models.Components.Security>? _securitySource = null;

            if(bearerAuthSource != null)
            {
                _securitySource = () => new Gr4vy.Models.Components.Security() { BearerAuth = bearerAuthSource() };
            }
            else if(bearerAuth != null)
            {
                _securitySource = () => new Gr4vy.Models.Components.Security() { BearerAuth = bearerAuth };
            }
            else
            {
                throw new Exception("bearerAuth and bearerAuthSource cannot both be null");
            }

            SDKConfiguration = new SDKConfig(client)
            {
                MerchantAccountId = merchantAccountId,
                ServerVariables = serverVariables,
                ServerName = server,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            InitHooks();

            AccountUpdater = new AccountUpdater(SDKConfiguration);

            Buyers = new Buyers(SDKConfiguration);

            PaymentMethods = new PaymentMethods(SDKConfiguration);

            GiftCards = new GiftCards(SDKConfiguration);

            CardSchemeDefinitions = new CardSchemeDefinitions(SDKConfiguration);

            DigitalWallets = new DigitalWallets(SDKConfiguration);

            Transactions = new Transactions(SDKConfiguration);

            Refunds = new Refunds(SDKConfiguration);

            PaymentOptions = new PaymentOptions(SDKConfiguration);

            PaymentServiceDefinitions = new PaymentServiceDefinitions(SDKConfiguration);

            PaymentServices = new PaymentServices(SDKConfiguration);

            AuditLogs = new AuditLogs(SDKConfiguration);

            CheckoutSessions = new CheckoutSessions(SDKConfiguration);

            MerchantAccounts = new MerchantAccounts(SDKConfiguration);

            Payouts = new Payouts(SDKConfiguration);
        }

        private void InitHooks()
        {
            string preHooksUrl = SDKConfiguration.GetTemplatedServerUrl();
            var (postHooksUrl, postHooksClient) = SDKConfiguration.Hooks.SDKInit(preHooksUrl, SDKConfiguration.Client);
            var config = SDKConfiguration;
            if (preHooksUrl != postHooksUrl)
            {
                config.ServerUrl = postHooksUrl;
            }
            config.Client = postHooksClient;
            SDKConfiguration = config;
        }
    }
}