//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Gr4vy
{
    using Gr4vy.Hooks;
    using Gr4vy.Models.Components;
    using Gr4vy.Models.Errors;
    using Gr4vy.Models.Requests;
    using Gr4vy.Utils;
    using Gr4vy.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;


    /// <summary>
    /// Gr4vy: The Gr4vy API.
    /// </summary>
    public interface IGr4vySDK
    {
        public IAccountUpdater AccountUpdater { get; }
        public IBuyers Buyers { get; }
        public IPaymentMethods PaymentMethods { get; }
        public IGiftCards GiftCards { get; }
        public ICardSchemeDefinitions CardSchemeDefinitions { get; }
        public IDigitalWallets DigitalWallets { get; }
        public ITransactions Transactions { get; }
        public IRefunds Refunds { get; }
        public IPaymentOptions PaymentOptions { get; }
        public IPaymentServiceDefinitions PaymentServiceDefinitions { get; }
        public IPaymentServices PaymentServices { get; }
        public IAuditLogs AuditLogs { get; }
        public IReports Reports { get; }
        public IReportExecutions ReportExecutions { get; }
        public ICheckoutSessions CheckoutSessions { get; }
        public IMerchantAccounts MerchantAccounts { get; }
        public IPayouts Payouts { get; }
        public IPaymentLinks PaymentLinks { get; }

        /// <summary>
        /// Browse
        /// </summary>
        Task<object> BrowsePaymentMethodDefinitionsGetAsync(string? merchantAccountId = null, RetryConfig? retryConfig = null);
    }


    /// <summary>
    /// Gr4vy: The Gr4vy API.
    /// </summary>
    public class Gr4vySDK: IGr4vySDK
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "1.1.24";
        private const string _sdkGenVersion = "2.674.3";
        private const string _openapiDocVersion = "1.0.0";
        public IAccountUpdater AccountUpdater { get; private set; }
        public IBuyers Buyers { get; private set; }
        public IPaymentMethods PaymentMethods { get; private set; }
        public IGiftCards GiftCards { get; private set; }
        public ICardSchemeDefinitions CardSchemeDefinitions { get; private set; }
        public IDigitalWallets DigitalWallets { get; private set; }
        public ITransactions Transactions { get; private set; }
        public IRefunds Refunds { get; private set; }
        public IPaymentOptions PaymentOptions { get; private set; }
        public IPaymentServiceDefinitions PaymentServiceDefinitions { get; private set; }
        public IPaymentServices PaymentServices { get; private set; }
        public IAuditLogs AuditLogs { get; private set; }
        public IReports Reports { get; private set; }
        public IReportExecutions ReportExecutions { get; private set; }
        public ICheckoutSessions CheckoutSessions { get; private set; }
        public IMerchantAccounts MerchantAccounts { get; private set; }
        public IPayouts Payouts { get; private set; }
        public IPaymentLinks PaymentLinks { get; private set; }

        public Gr4vySDK(SDKConfig config)
        {
            SDKConfiguration = config;
            InitHooks();

            AccountUpdater = new AccountUpdater(SDKConfiguration);

            Buyers = new Buyers(SDKConfiguration);

            PaymentMethods = new PaymentMethods(SDKConfiguration);

            GiftCards = new GiftCards(SDKConfiguration);

            CardSchemeDefinitions = new CardSchemeDefinitions(SDKConfiguration);

            DigitalWallets = new DigitalWallets(SDKConfiguration);

            Transactions = new Transactions(SDKConfiguration);

            Refunds = new Refunds(SDKConfiguration);

            PaymentOptions = new PaymentOptions(SDKConfiguration);

            PaymentServiceDefinitions = new PaymentServiceDefinitions(SDKConfiguration);

            PaymentServices = new PaymentServices(SDKConfiguration);

            AuditLogs = new AuditLogs(SDKConfiguration);

            Reports = new Reports(SDKConfiguration);

            ReportExecutions = new ReportExecutions(SDKConfiguration);

            CheckoutSessions = new CheckoutSessions(SDKConfiguration);

            MerchantAccounts = new MerchantAccounts(SDKConfiguration);

            Payouts = new Payouts(SDKConfiguration);

            PaymentLinks = new PaymentLinks(SDKConfiguration);
        }

        public Gr4vySDK(string? bearerAuth = null, Func<string>? bearerAuthSource = null, string? merchantAccountId = null, SDKConfig.Server? server = null, string? id = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }
            Func<Gr4vy.Models.Components.Security>? _securitySource = null;

            if(bearerAuthSource != null)
            {
                _securitySource = () => new Gr4vy.Models.Components.Security() { BearerAuth = bearerAuthSource() };
            }
            else if(bearerAuth != null)
            {
                _securitySource = () => new Gr4vy.Models.Components.Security() { BearerAuth = bearerAuth };
            }
            else
            {
                throw new Exception("bearerAuth and bearerAuthSource cannot both be null");
            }

            SDKConfiguration = new SDKConfig(client)
            {
                MerchantAccountId = merchantAccountId,
                ServerName = server,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            if (id != null)
            {
                SDKConfiguration.SetServerVariable("id", id);
            }

            InitHooks();

            AccountUpdater = new AccountUpdater(SDKConfiguration);

            Buyers = new Buyers(SDKConfiguration);

            PaymentMethods = new PaymentMethods(SDKConfiguration);

            GiftCards = new GiftCards(SDKConfiguration);

            CardSchemeDefinitions = new CardSchemeDefinitions(SDKConfiguration);

            DigitalWallets = new DigitalWallets(SDKConfiguration);

            Transactions = new Transactions(SDKConfiguration);

            Refunds = new Refunds(SDKConfiguration);

            PaymentOptions = new PaymentOptions(SDKConfiguration);

            PaymentServiceDefinitions = new PaymentServiceDefinitions(SDKConfiguration);

            PaymentServices = new PaymentServices(SDKConfiguration);

            AuditLogs = new AuditLogs(SDKConfiguration);

            Reports = new Reports(SDKConfiguration);

            ReportExecutions = new ReportExecutions(SDKConfiguration);

            CheckoutSessions = new CheckoutSessions(SDKConfiguration);

            MerchantAccounts = new MerchantAccounts(SDKConfiguration);

            Payouts = new Payouts(SDKConfiguration);

            PaymentLinks = new PaymentLinks(SDKConfiguration);
        }

        private void InitHooks()
        {
            string preHooksUrl = SDKConfiguration.GetTemplatedServerUrl();
            var (postHooksUrl, postHooksClient) = SDKConfiguration.Hooks.SDKInit(preHooksUrl, SDKConfiguration.Client);
            var config = SDKConfiguration;
            if (preHooksUrl != postHooksUrl)
            {
                config.ServerUrl = postHooksUrl;
            }
            config.Client = postHooksClient;
            SDKConfiguration = config;
        }

        public async Task<object> BrowsePaymentMethodDefinitionsGetAsync(string? merchantAccountId = null, RetryConfig? retryConfig = null)
        {
            var request = new BrowsePaymentMethodDefinitionsGetRequest()
            {
                MerchantAccountId = merchantAccountId,
            };
            request.MerchantAccountId ??= SDKConfiguration.MerchantAccountId;
            
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/payment-method-definitions";

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", SDKConfiguration.UserAgent);
            HeaderSerializer.PopulateHeaders(ref httpRequest, request);

            if (SDKConfiguration.SecuritySource != null)
            {
                httpRequest = new SecurityMetadata(SDKConfiguration.SecuritySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext(SDKConfiguration, baseUrl, "browse_payment_method_definitions_get", new List<string> {  }, SDKConfiguration.SecuritySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);
            if (retryConfig == null)
            {
                if (this.SDKConfiguration.RetryConfig != null)
                {
                    retryConfig = this.SDKConfiguration.RetryConfig;
                }
                else
                {
                    var backoff = new BackoffStrategy(
                        initialIntervalMs: 200L,
                        maxIntervalMs: 200L,
                        maxElapsedTimeMs: 1000L,
                        exponent: 1
                    );
                    retryConfig = new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: backoff,
                        retryConnectionErrors: true
                    );
                }
            }

            List<string> statusCodes = new List<string>
            {
                "5XX",
            };

            Func<Task<HttpResponseMessage>> retrySend = async () =>
            {
                var _httpRequest = await SDKConfiguration.Client.CloneAsync(httpRequest);
                return await SDKConfiguration.Client.SendAsync(_httpRequest);
            };
            var retries = new Gr4vy.Utils.Retries.Retries(retrySend, retryConfig, statusCodes);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await retries.Run();
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode == 422 || _statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<object>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    return obj!;
                }

                throw new Models.Errors.APIException("Unknown content type received", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }
            else if(responseStatusCode == 422)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<HTTPValidationError>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    throw obj!;
                }

                throw new Models.Errors.APIException("Unknown content type received", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.APIException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.APIException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }

            throw new Models.Errors.APIException("Unknown status code received", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
        }

        public class SDKBuilder
        {
            private SDKConfig _sdkConfig = new SDKConfig(client: new SpeakeasyHttpClient());

            public SDKBuilder() { }

            public SDKBuilder WithServer(SDKConfig.Server server)
            {
                _sdkConfig.ServerName = server;
                return this;
            }

            public SDKBuilder WithId(string id)
            {
                _sdkConfig.SetServerVariable("id", id);
                return this;
            }

            public SDKBuilder WithServerUrl(string serverUrl, Dictionary<string, string>? serverVariables = null)
            {
                if (serverVariables != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, serverVariables);
                }
                _sdkConfig.ServerUrl = serverUrl;
                return this;
            }

            public SDKBuilder WithMerchantAccountId(string merchantAccountId)
            {
                _sdkConfig.MerchantAccountId = merchantAccountId;
                return this;
            }

            public SDKBuilder WithBearerAuthSource(Func<string> bearerAuthSource)
            {
                _sdkConfig.SecuritySource = () => new Gr4vy.Models.Components.Security() { BearerAuth = bearerAuthSource() };
                return this;
            }

            public SDKBuilder WithBearerAuth(string bearerAuth)
            {
                _sdkConfig.SecuritySource = () => new Gr4vy.Models.Components.Security() { BearerAuth = bearerAuth };
                return this;
            }

            public SDKBuilder WithClient(ISpeakeasyHttpClient client)
            {
                _sdkConfig.Client = client;
                return this;
            }

            public SDKBuilder WithRetryConfig(RetryConfig retryConfig)
            {
                _sdkConfig.RetryConfig = retryConfig;
                return this;
            }

            public Gr4vySDK Build()
            {
              if (_sdkConfig.SecuritySource == null) {
                  throw new Exception("securitySource cannot be null. One of `BearerAuth` or `bearerAuthSource` needs to be defined.");
              }
              return new Gr4vySDK(_sdkConfig);
            }

        }

        public static SDKBuilder Builder() => new SDKBuilder();
    }
}