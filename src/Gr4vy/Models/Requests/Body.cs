//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Gr4vy.Models.Requests
{
    using Gr4vy.Models.Components;
    using Gr4vy.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class BodyType
    {
        private BodyType(string value) { Value = value; }

        public string Value { get; private set; }

        public static BodyType CardPaymentMethodCreate { get { return new BodyType("CardPaymentMethodCreate"); } }

        public static BodyType RedirectPaymentMethodCreate { get { return new BodyType("RedirectPaymentMethodCreate"); } }

        public static BodyType CheckoutSessionPaymentMethodCreate { get { return new BodyType("CheckoutSessionPaymentMethodCreate"); } }

        public static BodyType PlaidPaymentMethodCreate { get { return new BodyType("PlaidPaymentMethodCreate"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(BodyType v) { return v.Value; }
        public static BodyType FromString(string v) {
            switch(v) {
                case "CardPaymentMethodCreate": return CardPaymentMethodCreate;
                case "RedirectPaymentMethodCreate": return RedirectPaymentMethodCreate;
                case "CheckoutSessionPaymentMethodCreate": return CheckoutSessionPaymentMethodCreate;
                case "PlaidPaymentMethodCreate": return PlaidPaymentMethodCreate;
                default: throw new ArgumentException("Invalid value for BodyType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((BodyType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Body.BodyConverter))]
    public class Body
    {
        public Body(BodyType type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public CardPaymentMethodCreate? CardPaymentMethodCreate { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public RedirectPaymentMethodCreate? RedirectPaymentMethodCreate { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public CheckoutSessionPaymentMethodCreate? CheckoutSessionPaymentMethodCreate { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public PlaidPaymentMethodCreate? PlaidPaymentMethodCreate { get; set; }

        public BodyType Type { get; set; }
        public static Body CreateCardPaymentMethodCreate(CardPaymentMethodCreate cardPaymentMethodCreate)
        {
            BodyType typ = BodyType.CardPaymentMethodCreate;

            Body res = new Body(typ);
            res.CardPaymentMethodCreate = cardPaymentMethodCreate;
            return res;
        }
        public static Body CreateRedirectPaymentMethodCreate(RedirectPaymentMethodCreate redirectPaymentMethodCreate)
        {
            BodyType typ = BodyType.RedirectPaymentMethodCreate;

            Body res = new Body(typ);
            res.RedirectPaymentMethodCreate = redirectPaymentMethodCreate;
            return res;
        }
        public static Body CreateCheckoutSessionPaymentMethodCreate(CheckoutSessionPaymentMethodCreate checkoutSessionPaymentMethodCreate)
        {
            BodyType typ = BodyType.CheckoutSessionPaymentMethodCreate;

            Body res = new Body(typ);
            res.CheckoutSessionPaymentMethodCreate = checkoutSessionPaymentMethodCreate;
            return res;
        }
        public static Body CreatePlaidPaymentMethodCreate(PlaidPaymentMethodCreate plaidPaymentMethodCreate)
        {
            BodyType typ = BodyType.PlaidPaymentMethodCreate;

            Body res = new Body(typ);
            res.PlaidPaymentMethodCreate = plaidPaymentMethodCreate;
            return res;
        }

        public class BodyConverter : JsonConverter
        {
            public override bool CanConvert(System.Type objectType) => objectType == typeof(Body);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null)
                {
                    throw new InvalidOperationException("Received unexpected null JSON value");
                }

                var json = JRaw.Create(reader).ToString();
                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Body(BodyType.CheckoutSessionPaymentMethodCreate)
                    {
                        CheckoutSessionPaymentMethodCreate = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<CheckoutSessionPaymentMethodCreate>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(CheckoutSessionPaymentMethodCreate), new Body(BodyType.CheckoutSessionPaymentMethodCreate), "CheckoutSessionPaymentMethodCreate"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Body(BodyType.PlaidPaymentMethodCreate)
                    {
                        PlaidPaymentMethodCreate = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<PlaidPaymentMethodCreate>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(PlaidPaymentMethodCreate), new Body(BodyType.PlaidPaymentMethodCreate), "PlaidPaymentMethodCreate"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Body(BodyType.RedirectPaymentMethodCreate)
                    {
                        RedirectPaymentMethodCreate = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<RedirectPaymentMethodCreate>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(RedirectPaymentMethodCreate), new Body(BodyType.RedirectPaymentMethodCreate), "RedirectPaymentMethodCreate"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Body(BodyType.CardPaymentMethodCreate)
                    {
                        CardPaymentMethodCreate = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<CardPaymentMethodCreate>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(CardPaymentMethodCreate), new Body(BodyType.CardPaymentMethodCreate), "CardPaymentMethodCreate"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null)
                {
                    throw new InvalidOperationException("Unexpected null JSON value.");
                }

                Body res = (Body)value;

                if (res.CardPaymentMethodCreate != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.CardPaymentMethodCreate));
                    return;
                }

                if (res.RedirectPaymentMethodCreate != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.RedirectPaymentMethodCreate));
                    return;
                }

                if (res.CheckoutSessionPaymentMethodCreate != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.CheckoutSessionPaymentMethodCreate));
                    return;
                }

                if (res.PlaidPaymentMethodCreate != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.PlaidPaymentMethodCreate));
                    return;
                }
            }

        }

    }
}