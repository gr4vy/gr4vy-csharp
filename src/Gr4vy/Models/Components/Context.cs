//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Gr4vy.Models.Components
{
    using Gr4vy.Models.Components;
    using Gr4vy.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class ContextType
    {
        private ContextType(string value) { Value = value; }

        public string Value { get; private set; }

        public static ContextType WalletPaymentOptionContext { get { return new ContextType("WalletPaymentOptionContext"); } }

        public static ContextType GooglePayPaymentOptionContext { get { return new ContextType("GooglePayPaymentOptionContext"); } }

        public static ContextType PaymentOptionContext { get { return new ContextType("PaymentOptionContext"); } }

        public static ContextType Null { get { return new ContextType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ContextType v) { return v.Value; }
        public static ContextType FromString(string v) {
            switch(v) {
                case "WalletPaymentOptionContext": return WalletPaymentOptionContext;
                case "GooglePayPaymentOptionContext": return GooglePayPaymentOptionContext;
                case "PaymentOptionContext": return PaymentOptionContext;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ContextType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ContextType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Context.ContextConverter))]
    public class Context
    {
        public Context(ContextType type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public WalletPaymentOptionContext? WalletPaymentOptionContext { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public GooglePayPaymentOptionContext? GooglePayPaymentOptionContext { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public PaymentOptionContext? PaymentOptionContext { get; set; }

        public ContextType Type { get; set; }
        public static Context CreateWalletPaymentOptionContext(WalletPaymentOptionContext walletPaymentOptionContext)
        {
            ContextType typ = ContextType.WalletPaymentOptionContext;

            Context res = new Context(typ);
            res.WalletPaymentOptionContext = walletPaymentOptionContext;
            return res;
        }
        public static Context CreateGooglePayPaymentOptionContext(GooglePayPaymentOptionContext googlePayPaymentOptionContext)
        {
            ContextType typ = ContextType.GooglePayPaymentOptionContext;

            Context res = new Context(typ);
            res.GooglePayPaymentOptionContext = googlePayPaymentOptionContext;
            return res;
        }
        public static Context CreatePaymentOptionContext(PaymentOptionContext paymentOptionContext)
        {
            ContextType typ = ContextType.PaymentOptionContext;

            Context res = new Context(typ);
            res.PaymentOptionContext = paymentOptionContext;
            return res;
        }

        public static Context CreateNull()
        {
            ContextType typ = ContextType.Null;
            return new Context(typ);
        }

        public class ContextConverter : JsonConverter
        {
            public override bool CanConvert(System.Type objectType) => objectType == typeof(Context);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null)
                {
                    return null;
                }

                var json = JRaw.Create(reader).ToString();
                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Context(ContextType.WalletPaymentOptionContext)
                    {
                        WalletPaymentOptionContext = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<WalletPaymentOptionContext>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(WalletPaymentOptionContext), new Context(ContextType.WalletPaymentOptionContext), "WalletPaymentOptionContext"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Context(ContextType.GooglePayPaymentOptionContext)
                    {
                        GooglePayPaymentOptionContext = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<GooglePayPaymentOptionContext>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(GooglePayPaymentOptionContext), new Context(ContextType.GooglePayPaymentOptionContext), "GooglePayPaymentOptionContext"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Context(ContextType.PaymentOptionContext)
                    {
                        PaymentOptionContext = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<PaymentOptionContext>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(PaymentOptionContext), new Context(ContextType.PaymentOptionContext), "PaymentOptionContext"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null)
                {
                    writer.WriteRawValue("null");
                    return;
                }

                Context res = (Context)value;
                if (ContextType.FromString(res.Type).Equals(ContextType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }

                if (res.WalletPaymentOptionContext != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.WalletPaymentOptionContext));
                    return;
                }

                if (res.GooglePayPaymentOptionContext != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GooglePayPaymentOptionContext));
                    return;
                }

                if (res.PaymentOptionContext != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.PaymentOptionContext));
                    return;
                }
            }

        }

    }
}