//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Gr4vy.Models.Components
{
    using Gr4vy.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum CardScheme
    {
        [JsonProperty("accel")]
        Accel,
        [JsonProperty("amex")]
        Amex,
        [JsonProperty("bancontact")]
        Bancontact,
        [JsonProperty("carte-bancaire")]
        CarteBancaire,
        [JsonProperty("cirrus")]
        Cirrus,
        [JsonProperty("culiance")]
        Culiance,
        [JsonProperty("dankort")]
        Dankort,
        [JsonProperty("diners-club")]
        DinersClub,
        [JsonProperty("discover")]
        Discover,
        [JsonProperty("eftpos-australia")]
        EftposAustralia,
        [JsonProperty("elo")]
        Elo,
        [JsonProperty("hipercard")]
        Hipercard,
        [JsonProperty("jcb")]
        Jcb,
        [JsonProperty("maestro")]
        Maestro,
        [JsonProperty("mastercard")]
        Mastercard,
        [JsonProperty("mir")]
        Mir,
        [JsonProperty("nyce")]
        Nyce,
        [JsonProperty("other")]
        Other,
        [JsonProperty("pulse")]
        Pulse,
        [JsonProperty("rupay")]
        Rupay,
        [JsonProperty("star")]
        Star,
        [JsonProperty("uatp")]
        Uatp,
        [JsonProperty("unionpay")]
        Unionpay,
        [JsonProperty("visa")]
        Visa,
    }

    public static class CardSchemeExtension
    {
        public static string Value(this CardScheme value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static CardScheme ToEnum(this string value)
        {
            foreach(var field in typeof(CardScheme).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is CardScheme)
                    {
                        return (CardScheme)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum CardScheme");
        }
    }

}