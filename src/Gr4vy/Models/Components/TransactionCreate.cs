//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Gr4vy.Models.Components
{
    using Gr4vy.Models.Components;
    using Gr4vy.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class TransactionCreate
    {

        /// <summary>
        /// The monetary amount for this transaction, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`. If the `intent` is set to `capture`, an amount greater than zero must be supplied. All gift card amounts are subtracted from this amount before the remainder is charged to the provided `payment_method`.
        /// </summary>
        [JsonProperty("amount")]
        public long Amount { get; set; } = default!;

        /// <summary>
        /// A supported ISO 4217 currency code. For redirect requests, this value must match the one specified for `currency` in `payment_method`.
        /// </summary>
        [JsonProperty("currency")]
        public string Currency { get; set; } = default!;

        /// <summary>
        /// The 2-letter ISO code of the country where the transaction is processed. This is also used to filter the payment services that can process the transaction. If this value is provided for redirect requests and it&apos;s not `null`, it must match the one specified for `country` in `payment_method`. Otherwise, the value specified for `country` in `payment_method` will be assumed implicitly.
        /// </summary>
        [JsonProperty("country")]
        public string? Country { get; set; } = null;

        /// <summary>
        /// The optional payment method to use for this transaction. This field is required if no `gift_cards` have been added.
        /// </summary>
        [JsonProperty("payment_method")]
        public TransactionCreatePaymentMethod? PaymentMethod { get; set; } = null;

        /// <summary>
        /// Guest buyer details provided inline rather than creating a buyer resource beforehand and using the `buyer_id` or `buyer_external_identifier` keys. No buyer resource will be created on Gr4vy when used.
        /// </summary>
        [JsonProperty("buyer")]
        public GuestBuyerInput? Buyer { get; set; } = null;

        /// <summary>
        /// The ID of the buyer to associate this payment method to. If this field is provided then the `buyer_external_identifier` field needs to be unset. If a stored payment method or gift card is provided, then the buyer for that payment method needs to match the buyer for this field.
        /// </summary>
        [JsonProperty("buyer_id")]
        public string? BuyerId { get; set; } = null;

        /// <summary>
        /// The `external_identifier` of the buyer to associate this payment method to. If this field is provided then the `buyer_id` field needs to be unset. If a stored payment method or gift card is provided, then the buyer for that payment method needs to match the buyer for this field.
        /// </summary>
        [JsonProperty("buyer_external_identifier")]
        public string? BuyerExternalIdentifier { get; set; } = null;

        /// <summary>
        /// The optional gift card(s) to use for this transaction. At least one gift card is required if no other `payment_method` has been added. By default, only a maximum limit of 10 gift cards may be used in a single transaction. Please contact our team to change this limit.
        /// </summary>
        [JsonProperty("gift_cards")]
        public List<GiftCardUnion>? GiftCards { get; set; } = null;

        /// <summary>
        /// An external identifier that can be used to match the transaction against your own records.
        /// </summary>
        [JsonProperty("external_identifier")]
        public string? ExternalIdentifier { get; set; } = null;

        [JsonProperty("intent")]
        public string? Intent { get; set; }

        /// <summary>
        ///  Whether or not to also try and store the payment method with us so that it can be used again for future use. This is only supported for payment methods that support this feature. There are also a few restrictions on how the flag may be set:<br/>
        /// 
        /// <remarks>
        /// <br/>
        /// * The flag has to be set to `true` when the `payment_source` is set to `recurring` or `installment`, and `merchant_initiated` is set to `false`.<br/>
        /// * The flag has to be set to `false` (or not set) when using a previously vaulted payment method.
        /// </remarks>
        /// </summary>
        [JsonProperty("store")]
        public bool? Store { get; set; } = false;

        /// <summary>
        /// Pass through 3-D Secure data to support external 3-D Secure authorisation. If using an external 3-D Secure provider, you should not pass a `redirect_url` in the `payment_method` object for a transaction.
        /// </summary>
        [JsonProperty("three_d_secure_data")]
        public ThreeDSecureData? ThreeDSecureData { get; set; } = null;

        /// <summary>
        /// Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
        /// </summary>
        [JsonProperty("metadata")]
        public Dictionary<string, string>? Metadata { get; set; } = null;

        /// <summary>
        /// Indicates whether the transaction represents a subsequent payment coming from a setup recurring payment. Please note there are some restrictions on how this flag may be used.<br/>
        /// 
        /// <remarks>
        /// <br/>
        /// The flag can only be `false` (or not set) when the transaction meets one of the following criteria:<br/>
        /// <br/>
        /// * It is not `merchant_initiated`.<br/>
        /// * `payment_source` is set to `card_on_file`.<br/>
        /// <br/>
        /// The flag can only be set to `true` when the transaction meets one of the following criteria:<br/>
        /// * It is not `merchant_initiated`.<br/>
        /// * `payment_source` is set to `recurring` or `installment` and `merchant_initiated` is set to `true`.<br/>
        /// * `payment_source` is set to `card_on_file`.
        /// </remarks>
        /// </summary>
        [JsonProperty("is_subsequent_payment")]
        public bool? IsSubsequentPayment { get; set; } = false;

        /// <summary>
        /// Indicates whether the transaction was initiated by the merchant (true) or customer (false).
        /// </summary>
        [JsonProperty("merchant_initiated")]
        public bool? MerchantInitiated { get; set; } = false;

        /// <summary>
        /// The way payment method information made it to this transaction.
        /// </summary>
        [JsonProperty("payment_source")]
        public string? PaymentSource { get; set; }

        /// <summary>
        /// The airline addendum data which describes the airline booking associated with this transaction.
        /// </summary>
        [JsonProperty("airline")]
        public Airline? Airline { get; set; } = null;

        /// <summary>
        /// An array of cart items that represents the line items of a transaction.
        /// </summary>
        [JsonProperty("cart_items")]
        public List<CartItem>? CartItems { get; set; } = null;

        /// <summary>
        /// Details about the payment and the merchant which may end up on the (bank) statement for the payment.
        /// </summary>
        [JsonProperty("statement_descriptor")]
        public StatementDescriptor? StatementDescriptor { get; set; } = null;

        /// <summary>
        /// A scheme&apos;s transaction identifier to use in connecting a merchant initiated transaction to a previous customer initiated transaction. If not provided, and a qualifying customer initiated transaction has been previously made with the stored payment method, then Gr4vy will populate this value with the identifier returned for that transaction. This field is also know as the Visa Transaction Identifier, or Mastercard Trace ID.
        /// </summary>
        [JsonProperty("previous_scheme_transaction_id")]
        public string? PreviousSchemeTransactionId { get; set; } = null;

        /// <summary>
        /// Information about the browser used by the buyer. This can be used by anti-fraud services.
        /// </summary>
        [JsonProperty("browser_info")]
        public BrowserInfo? BrowserInfo { get; set; } = null;

        /// <summary>
        /// The unique identifier of a set of shipping details stored for the buyer. If provided, the created transaction will include a copy of the details at the point of transaction creation; i.e. it will not be affected by later changes to the detail in the database.
        /// </summary>
        [JsonProperty("shipping_details_id")]
        public string? ShippingDetailsId { get; set; } = null;

        /// <summary>
        /// Allows for passing optional configuration per connection to take advantage of connection specific features. When provided, the data is only passed to the target connection type to prevent sharing configuration across connections. Please note that each of the keys this object are in kebab-case, for example `cybersource-anti-fraud` as they represent the ID of the connector. All the other keys will be snake case, for example `merchant_defined_data` or camel case to match an external API that the connector uses.
        /// </summary>
        [JsonProperty("connection_options")]
        public Dictionary<string, Dictionary<string, object>>? ConnectionOptions { get; set; } = null;

        /// <summary>
        /// Whether to capture the transaction asynchronously.<br/>
        /// 
        /// <remarks>
        /// <br/>
        /// - When `async_capture` is `false` (default), the transaction is captured in the same request.<br/>
        /// - When `async_capture` is `true`, the transaction is automatically captured at a later time.<br/>
        /// <br/>
        /// Redirect transactions are not affected by this flag. This flag can only be set to `true` when `intent` is set to `capture`.
        /// </remarks>
        /// </summary>
        [JsonProperty("async_capture")]
        public bool? AsyncCapture { get; set; } = false;

        /// <summary>
        /// This field represents the fingerprint data to be passed to the active anti-fraud service.
        /// </summary>
        [JsonProperty("anti_fraud_fingerprint")]
        public string? AntiFraudFingerprint { get; set; } = null;

        /// <summary>
        /// The unique identifier of an existing payment service. When provided, the created transaction will be processed by the given payment service and any routing rules will be skipped.
        /// </summary>
        [JsonProperty("payment_service_id")]
        public string? PaymentServiceId { get; set; } = null;

        /// <summary>
        /// Marks the transaction as an AFT. Requires the payment service to support this feature, and might `recipient` and `buyer` data
        /// </summary>
        [JsonProperty("account_funding_transaction")]
        public bool? AccountFundingTransaction { get; set; } = false;

        /// <summary>
        /// Defines if the transaction will allow for a partial authorization.
        /// </summary>
        [JsonProperty("allow_partial_authorization")]
        public bool? AllowPartialAuthorization { get; set; } = false;

        /// <summary>
        /// The recipient of any account to account funding. For use with AFTs.
        /// </summary>
        [JsonProperty("recipient")]
        public Recipient? Recipient { get; set; } = null;
    }
}