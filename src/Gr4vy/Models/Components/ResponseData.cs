//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Gr4vy.Models.Components
{
    using Gr4vy.Models.Components;
    using Gr4vy.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class ResponseDataType
    {
        private ResponseDataType(string value) { Value = value; }

        public string Value { get; private set; }
        public static ResponseDataType ThreeDSecureDataV1 { get { return new ResponseDataType("ThreeDSecureDataV1"); } }
        
        public static ResponseDataType ThreeDSecureV2 { get { return new ResponseDataType("ThreeDSecureV2"); } }
        
        public static ResponseDataType Null { get { return new ResponseDataType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ResponseDataType v) { return v.Value; }
        public static ResponseDataType FromString(string v) {
            switch(v) {
                case "ThreeDSecureDataV1": return ThreeDSecureDataV1;
                case "ThreeDSecureV2": return ThreeDSecureV2;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ResponseDataType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ResponseDataType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API.
    /// </summary>
    [JsonConverter(typeof(ResponseData.ResponseDataConverter))]
    public class ResponseData {
        public ResponseData(ResponseDataType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public ThreeDSecureDataV1? ThreeDSecureDataV1 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public ThreeDSecureV2? ThreeDSecureV2 { get; set; }

        public ResponseDataType Type { get; set; }


        public static ResponseData CreateThreeDSecureDataV1(ThreeDSecureDataV1 threeDSecureDataV1) {
            ResponseDataType typ = ResponseDataType.ThreeDSecureDataV1;

            ResponseData res = new ResponseData(typ);
            res.ThreeDSecureDataV1 = threeDSecureDataV1;
            return res;
        }

        public static ResponseData CreateThreeDSecureV2(ThreeDSecureV2 threeDSecureV2) {
            ResponseDataType typ = ResponseDataType.ThreeDSecureV2;

            ResponseData res = new ResponseData(typ);
            res.ThreeDSecureV2 = threeDSecureV2;
            return res;
        }

        public static ResponseData CreateNull() {
            ResponseDataType typ = ResponseDataType.Null;
            return new ResponseData(typ);
        }

        public class ResponseDataConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(ResponseData);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new ResponseData(ResponseDataType.ThreeDSecureDataV1)
                    {
                        ThreeDSecureDataV1 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<ThreeDSecureDataV1>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(ThreeDSecureDataV1), new ResponseData(ResponseDataType.ThreeDSecureDataV1), "ThreeDSecureDataV1"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new ResponseData(ResponseDataType.ThreeDSecureV2)
                    {
                        ThreeDSecureV2 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<ThreeDSecureV2>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(ThreeDSecureV2), new ResponseData(ResponseDataType.ThreeDSecureV2), "ThreeDSecureV2"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                ResponseData res = (ResponseData)value;
                if (ResponseDataType.FromString(res.Type).Equals(ResponseDataType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.ThreeDSecureDataV1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ThreeDSecureDataV1));
                    return;
                }
                if (res.ThreeDSecureV2 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ThreeDSecureV2));
                    return;
                }

            }

        }

    }
}