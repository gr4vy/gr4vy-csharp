//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Gr4vy.Models.Components
{
    using Gr4vy.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum TaxIdKind
    {
        [JsonProperty("ae.trn")]
        AeTrn,
        [JsonProperty("au.abn")]
        AuAbn,
        [JsonProperty("ar.dni")]
        ArDni,
        [JsonProperty("ar.cuil")]
        ArCuil,
        [JsonProperty("ar.cuit")]
        ArCuit,
        [JsonProperty("br.cnpj")]
        BrCnpj,
        [JsonProperty("br.cpf")]
        BrCpf,
        [JsonProperty("ca.bn")]
        CaBn,
        [JsonProperty("ca.gst_hst")]
        CaGstHst,
        [JsonProperty("ca.pst_bc")]
        CaPstBc,
        [JsonProperty("ca.pst_mb")]
        CaPstMb,
        [JsonProperty("ca.pst_sk")]
        CaPstSk,
        [JsonProperty("ca.qst")]
        CaQst,
        [JsonProperty("ch.vat")]
        ChVat,
        [JsonProperty("cl.tin")]
        ClTin,
        [JsonProperty("co.itin")]
        CoItin,
        [JsonProperty("co.nit")]
        CoNit,
        [JsonProperty("es.cif")]
        EsCif,
        [JsonProperty("eu.vat")]
        EuVat,
        [JsonProperty("gb.vat")]
        GbVat,
        [JsonProperty("hk.br")]
        HkBr,
        [JsonProperty("id.nik")]
        IdNik,
        [JsonProperty("id.npwp")]
        IdNpwp,
        [JsonProperty("in.gst")]
        InGst,
        [JsonProperty("jp.cn")]
        JpCn,
        [JsonProperty("jp.rn")]
        JpRn,
        [JsonProperty("kr.brn")]
        KrBrn,
        [JsonProperty("li.uid")]
        LiUid,
        [JsonProperty("mx.curp")]
        MxCurp,
        [JsonProperty("mx.rfc")]
        MxRfc,
        [JsonProperty("my.frp")]
        MyFrp,
        [JsonProperty("my.itn")]
        MyItn,
        [JsonProperty("my.nric")]
        MyNric,
        [JsonProperty("my.sst")]
        MySst,
        [JsonProperty("no.vat")]
        NoVat,
        [JsonProperty("nz.gst")]
        NzGst,
        [JsonProperty("pe.ruc")]
        PeRuc,
        [JsonProperty("ph.tin")]
        PhTin,
        [JsonProperty("ru.inn")]
        RuInn,
        [JsonProperty("ru.kpp")]
        RuKpp,
        [JsonProperty("sa.vat")]
        SaVat,
        [JsonProperty("sg.gst")]
        SgGst,
        [JsonProperty("sg.uen")]
        SgUen,
        [JsonProperty("th.id")]
        ThId,
        [JsonProperty("th.vat")]
        ThVat,
        [JsonProperty("tw.vat")]
        TwVat,
        [JsonProperty("us.ein")]
        UsEin,
        [JsonProperty("za.vat")]
        ZaVat,
        [JsonProperty("bo.ci")]
        BoCi,
        [JsonProperty("uy.rut")]
        UyRut,
        [JsonProperty("uy.ci")]
        UyCi,
    }

    public static class TaxIdKindExtension
    {
        public static string Value(this TaxIdKind value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static TaxIdKind ToEnum(this string value)
        {
            foreach(var field in typeof(TaxIdKind).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is TaxIdKind)
                    {
                        return (TaxIdKind)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum TaxIdKind");
        }
    }

}